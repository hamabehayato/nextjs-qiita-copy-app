/* tslint:disable */
/* eslint-disable */
/**
 * API description
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface ArticleEntity
 */
export interface ArticleEntity {
  /**
   *
   * @type {number}
   * @memberof ArticleEntity
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof ArticleEntity
   */
  userId: string;
  /**
   *
   * @type {string}
   * @memberof ArticleEntity
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof ArticleEntity
   */
  body: string;
  /**
   *
   * @type {boolean}
   * @memberof ArticleEntity
   */
  published_flg?: boolean;
  /**
   *
   * @type {string}
   * @memberof ArticleEntity
   */
  published_at?: string;
  /**
   *
   * @type {string}
   * @memberof ArticleEntity
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof ArticleEntity
   */
  updatedAt: string;
}
/**
 *
 * @export
 * @interface AuthResponseDto
 */
export interface AuthResponseDto {
  /**
   *
   * @type {AuthResponseDtoUser}
   * @memberof AuthResponseDto
   */
  user: AuthResponseDtoUser;
  /**
   *
   * @type {string}
   * @memberof AuthResponseDto
   */
  accessToken: string;
}
/**
 *
 * @export
 * @interface AuthResponseDtoUser
 */
export interface AuthResponseDtoUser {
  /**
   *
   * @type {number}
   * @memberof AuthResponseDtoUser
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof AuthResponseDtoUser
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof AuthResponseDtoUser
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof AuthResponseDtoUser
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof AuthResponseDtoUser
   */
  updatedAt: string;
}
/**
 *
 * @export
 * @interface CreateArticleDto
 */
export interface CreateArticleDto {
  /**
   *
   * @type {string}
   * @memberof CreateArticleDto
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof CreateArticleDto
   */
  body: string;
}
/**
 *
 * @export
 * @interface FindArticleListResponseDto
 */
export interface FindArticleListResponseDto {
  /**
   *
   * @type {Array<ArticleEntity>}
   * @memberof FindArticleListResponseDto
   */
  articles: Array<ArticleEntity>;
}
/**
 *
 * @export
 * @interface FindArticleResponseDto
 */
export interface FindArticleResponseDto {
  /**
   *
   * @type {FindArticleResponseDtoArticle}
   * @memberof FindArticleResponseDto
   */
  article: FindArticleResponseDtoArticle;
}
/**
 *
 * @export
 * @interface FindArticleResponseDtoArticle
 */
export interface FindArticleResponseDtoArticle {
  /**
   *
   * @type {number}
   * @memberof FindArticleResponseDtoArticle
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof FindArticleResponseDtoArticle
   */
  userId: string;
  /**
   *
   * @type {string}
   * @memberof FindArticleResponseDtoArticle
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof FindArticleResponseDtoArticle
   */
  body: string;
  /**
   *
   * @type {boolean}
   * @memberof FindArticleResponseDtoArticle
   */
  published_flg?: boolean;
  /**
   *
   * @type {string}
   * @memberof FindArticleResponseDtoArticle
   */
  published_at?: string;
  /**
   *
   * @type {string}
   * @memberof FindArticleResponseDtoArticle
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof FindArticleResponseDtoArticle
   */
  updatedAt: string;
}
/**
 *
 * @export
 * @interface LogInUserDto
 */
export interface LogInUserDto {
  /**
   *
   * @type {string}
   * @memberof LogInUserDto
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof LogInUserDto
   */
  password: string;
}
/**
 *
 * @export
 * @interface SignUpUserDto
 */
export interface SignUpUserDto {
  /**
   *
   * @type {string}
   * @memberof SignUpUserDto
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof SignUpUserDto
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof SignUpUserDto
   */
  password: string;
}
/**
 *
 * @export
 * @interface UpdateArticleDto
 */
export interface UpdateArticleDto {
  /**
   *
   * @type {string}
   * @memberof UpdateArticleDto
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof UpdateArticleDto
   */
  body?: string;
}
/**
 *
 * @export
 * @interface UserEntity
 */
export interface UserEntity {
  /**
   *
   * @type {number}
   * @memberof UserEntity
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof UserEntity
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof UserEntity
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof UserEntity
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof UserEntity
   */
  updatedAt: string;
}

/**
 * ArticleApi - axios parameter creator
 * @export
 */
export const ArticleApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {CreateArticleDto} createArticleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleControllerCreate: async (
      createArticleDto: CreateArticleDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'createArticleDto' is not null or undefined
      assertParamExists('articleControllerCreate', 'createArticleDto', createArticleDto);
      const localVarPath = `/api/article`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(createArticleDto, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleControllerFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/article`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('articleControllerFindOne', 'id', id);
      const localVarPath = `/api/article/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('articleControllerRemove', 'id', id);
      const localVarPath = `/api/article/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {UpdateArticleDto} updateArticleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleControllerUpdate: async (
      id: string,
      updateArticleDto: UpdateArticleDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('articleControllerUpdate', 'id', id);
      // verify required parameter 'updateArticleDto' is not null or undefined
      assertParamExists('articleControllerUpdate', 'updateArticleDto', updateArticleDto);
      const localVarPath = `/api/article/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(updateArticleDto, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ArticleApi - functional programming interface
 * @export
 */
export const ArticleApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ArticleApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {CreateArticleDto} createArticleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async articleControllerCreate(
      createArticleDto: CreateArticleDto,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindArticleResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.articleControllerCreate(createArticleDto, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async articleControllerFindAll(
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindArticleListResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.articleControllerFindAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async articleControllerFindOne(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindArticleResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.articleControllerFindOne(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async articleControllerRemove(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindArticleResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.articleControllerRemove(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} id
     * @param {UpdateArticleDto} updateArticleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async articleControllerUpdate(
      id: string,
      updateArticleDto: UpdateArticleDto,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindArticleResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.articleControllerUpdate(id, updateArticleDto, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * ArticleApi - factory interface
 * @export
 */
export const ArticleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = ArticleApiFp(configuration);
  return {
    /**
     *
     * @param {CreateArticleDto} createArticleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleControllerCreate(createArticleDto: CreateArticleDto, options?: any): AxiosPromise<FindArticleResponseDto> {
      return localVarFp.articleControllerCreate(createArticleDto, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleControllerFindAll(options?: any): AxiosPromise<FindArticleListResponseDto> {
      return localVarFp.articleControllerFindAll(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleControllerFindOne(id: string, options?: any): AxiosPromise<FindArticleResponseDto> {
      return localVarFp.articleControllerFindOne(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleControllerRemove(id: string, options?: any): AxiosPromise<FindArticleResponseDto> {
      return localVarFp.articleControllerRemove(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {UpdateArticleDto} updateArticleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    articleControllerUpdate(
      id: string,
      updateArticleDto: UpdateArticleDto,
      options?: any
    ): AxiosPromise<FindArticleResponseDto> {
      return localVarFp
        .articleControllerUpdate(id, updateArticleDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ArticleApi - object-oriented interface
 * @export
 * @class ArticleApi
 * @extends {BaseAPI}
 */
export class ArticleApi extends BaseAPI {
  /**
   *
   * @param {CreateArticleDto} createArticleDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArticleApi
   */
  public articleControllerCreate(createArticleDto: CreateArticleDto, options?: AxiosRequestConfig) {
    return ArticleApiFp(this.configuration)
      .articleControllerCreate(createArticleDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArticleApi
   */
  public articleControllerFindAll(options?: AxiosRequestConfig) {
    return ArticleApiFp(this.configuration)
      .articleControllerFindAll(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArticleApi
   */
  public articleControllerFindOne(id: string, options?: AxiosRequestConfig) {
    return ArticleApiFp(this.configuration)
      .articleControllerFindOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArticleApi
   */
  public articleControllerRemove(id: string, options?: AxiosRequestConfig) {
    return ArticleApiFp(this.configuration)
      .articleControllerRemove(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {UpdateArticleDto} updateArticleDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArticleApi
   */
  public articleControllerUpdate(id: string, updateArticleDto: UpdateArticleDto, options?: AxiosRequestConfig) {
    return ArticleApiFp(this.configuration)
      .articleControllerUpdate(id, updateArticleDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerAuthentication: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/auth/authentication`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {LogInUserDto} logInUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLogIn: async (logInUserDto: LogInUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'logInUserDto' is not null or undefined
      assertParamExists('authControllerLogIn', 'logInUserDto', logInUserDto);
      const localVarPath = `/api/auth/sign_in`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(logInUserDto, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {SignUpUserDto} signUpUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerSignUp: async (
      signUpUserDto: SignUpUserDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'signUpUserDto' is not null or undefined
      assertParamExists('authControllerSignUp', 'signUpUserDto', signUpUserDto);
      const localVarPath = `/api/auth/sign_up`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(signUpUserDto, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authControllerAuthentication(
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerAuthentication(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {LogInUserDto} logInUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authControllerLogIn(
      logInUserDto: LogInUserDto,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogIn(logInUserDto, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {SignUpUserDto} signUpUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authControllerSignUp(
      signUpUserDto: SignUpUserDto,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerSignUp(signUpUserDto, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = AuthApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerAuthentication(options?: any): AxiosPromise<AuthResponseDto> {
      return localVarFp.authControllerAuthentication(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {LogInUserDto} logInUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLogIn(logInUserDto: LogInUserDto, options?: any): AxiosPromise<AuthResponseDto> {
      return localVarFp.authControllerLogIn(logInUserDto, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {SignUpUserDto} signUpUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerSignUp(signUpUserDto: SignUpUserDto, options?: any): AxiosPromise<AuthResponseDto> {
      return localVarFp.authControllerSignUp(signUpUserDto, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authControllerAuthentication(options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .authControllerAuthentication(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {LogInUserDto} logInUserDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authControllerLogIn(logInUserDto: LogInUserDto, options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .authControllerLogIn(logInUserDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {SignUpUserDto} signUpUserDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authControllerSignUp(signUpUserDto: SignUpUserDto, options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .authControllerSignUp(signUpUserDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
